// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// one user many msgs 1-m

model User {
    id         String    @id @default(uuid())
    name       String
    surname    String
    email      String    @unique
    password   String
    verified   Boolean   @default(false)
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt()
    // fk
    comments   Comment[]
}

model Comment {
    id         String   @id @default(uuid())
    author_id  String
    text       String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt()
    // fk
    author     User?    @relation(fields: [author_id], references: [id])
}

// route -> trips -> shapes  1-m m-1
model Route {
    route_id         String  @id
    route_short_name String
    route_long_name  String
    route_desc       String
    route_type       String
    route_url        String
    route_color      String
    route_text_color String
    trips            Trips[]
}

model Trips {
    route_id              String
    service_id            String
    trip_id               String @id
    trip_headsign         String
    direction_id          String
    block_id              String
    shape_id              String
    wheelchair_accessible String

    // fk
    stop_times                Stop_times[]
    route                     Route        @relation(fields: [route_id], references: [route_id])
    Shapes                    Shapes?      @relation(fields: [shapesShape_id, shapesShape_dist_traveled], references: [shape_id, shape_dist_traveled])
    shapesShape_id            String?
    shapesShape_dist_traveled String?
}

model Shapes {
    shape_id            String
    shape_pt_lat        String
    shape_pt_lon        String
    shape_pt_sequence   String
    shape_dist_traveled String
    trips               Trips[]

    @@id([shape_id, shape_dist_traveled])
}

model Stops {
    stop_id        String @id
    stop_code      String
    stop_name      String
    stop_desc      String
    stop_lat       String
    stop_lon       String
    stop_url       String
    location_type  String
    parent_station String

    stop_times Stop_times[]
}

model Stop_times {
    trip_id        String
    arrival_time   String
    departure_time String
    stop_id        String
    stop_sequence  String
    pickup_type    String
    drop_off_type  String
    stops          Stops? @relation(fields: [stop_id], references: [stop_id])
    trips          Trips? @relation(fields: [trip_id], references: [trip_id])

    @@id([trip_id, stop_id])
}

model Calendar {
    service_id String  @id
    monday     Boolean
    tuesday    Boolean
    wednesday  Boolean
    thursday   Boolean
    friday     Boolean
    saturday   Boolean
    sunday     Boolean
    start_date String
    end_date   String

    calendar_dates Calendar_dates[]
}

model Calendar_dates {
    service_id     String
    date           String
    exception_type String
    Calendar       Calendar? @relation(fields: [service_id], references: [service_id])

    @@id([service_id, date])
}
